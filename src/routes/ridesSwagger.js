/**
 * @swagger
 * components:
 *   schemas:
 *     Ride:
 *       type: object
 *       required:
 *         - startLat
 *         - startLong
 *         - endLat
 *         - endLong
 *         - riderName
 *         - driverName
 *         - driverVehicle
 *       properties:
 *         rideID:
 *           type: INTEGER
 *           description: unique rideID
 *         startLat:
 *           type: DECIMAL
 *           description: The ride starting latitude. Is >=-90 && <=90
 *         startLong:
 *           type: DECIMAL
 *           description: The ride starting longitude. Is >=-180 && <=180
 *         endLat:
 *           type: DECIMAL
 *           description: The ride ending latitude. Is >=-90 && <=90
 *         endLong:
 *           type: DECIMAL
 *           description: The ride ending longitude. Is >=-180 && <=180
 *         riderName:
 *           type: TEXT
 *           description: The rider name. Is >1 char
 *         driverName:
 *           type: TEXT
 *           description: The driver name. Is >1 char
 *         driverVehicle:
 *           type: TEXT
 *           description: The driver vehikle name. Is >1 char
 *         created:
 *           type: DATETIME
 *           description: Autogenerated dateTime
 *       example:
 *         rideID: 12
 *         startLat: -32
 *         startLong: 34
 *         endLat: 1
 *         endLong: -1
 *         riderName: Bopt
 *         driverName: L.Blake 
 *         driverVehicle: Just a car
 *         created:
 *     RidePayload:
 *       type: object
 *       required:
 *         - startLat
 *         - startLong
 *         - endLat
 *         - endLong
 *         - riderName
 *         - driverName
 *         - driverVehicle
 *       properties:
 *         startLat:
 *           type: DECIMAL
 *           description: The ride starting latitude. Is >=-90 && <=90
 *         startLong:
 *           type: DECIMAL
 *           description: The ride starting longitude. Is >=-180 && <=180
 *         endLat:
 *           type: DECIMAL
 *           description: The ride ending latitude. Is >=-90 && <=90
 *         endLong:
 *           type: DECIMAL
 *           description: The ride ending longitude. Is >=-180 && <=180
 *         riderName:
 *           type: TEXT
 *           description: The rider name. Is >1 char
 *         driverName:
 *           type: TEXT
 *           description: The driver name. Is >1 char
 *         driverVehicle:
 *           type: TEXT
 *           description: The driver vehikle name. Is >1 char
 *       example:
 *         startLat: -32
 *         startLong: 34
 *         endLat: 1
 *         endLong: -1
 *         riderName: Bopt
 *         driverName: L.Blake 
 *         driverVehicle: Just a car
 *     Error:
 *       type: object
 *       properties:
 *         error_code:
 *           type: TEXT
 *           description: The error code
 *         message:
 *           type: TEXT
 *           description: The error description
 *       example:
 *         error_code: RIDES_NOT_FOUND_ERROR
 *         message: Could not find any rides
 */

/**
  * @swagger
  * tags:
  *   name: Rides
  *   description: The rides managing API
  */

/**
 * @swagger
 * /rides:
 *   post:
 *     summary: Create a new ride
 *     tags: [Rides]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RidePayload'
 *     responses:
 *       200:
 *         description: The ride was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Ride'
 *       500:
 *         description: Some server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       400:
 *         description: Invalid parameter 
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

/**
 * @swagger
 * /rides:
 *   get:
 *     summary: Returns the list of all the rides
 *     tags: [Rides]
 *     responses:
 *       200:
 *         description: The list of the rides
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Ride'
 *       404:
 *         description: Rides were not found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

/**
 * @swagger
 * /rides/{id}:
 *   get:
 *     summary: Get the ride by id
 *     tags: [Rides]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The ride id
 *     responses:
 *       200:
 *         description: The ride description by id
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Ride'
 *       404:
 *         description: The ride was not found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */